package ${myUtil.rootPackageName}.${myUtil.packageName}.dao.impl;
import com.ag.mail.common.dao.BaseDao;
import com.ag.mail.common.utils.StringUtils;
import ${myUtil.rootPackageName}.${myUtil.packageName}.dao.I${myUtil.entityClassName}Dao;
import ${myUtil.rootPackageName}.${myUtil.packageName}.entity.${myUtil.entityClassName};
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Repository;

import javax.annotation.Resource;
import java.util.List;

@Repository
public class ${myUtil.entityClassName}DaoImpl implements I${myUtil.entityClassName}Dao {
    @Resource(name = "mongoTemplate")
    private MongoTemplate mongoTemplate;

    public ${myUtil.entityClassName} insert(${myUtil.entityClassName} ${myUtil.entityName}) {
        BaseDao<${myUtil.entityClassName}> baseDao = new BaseDao<${myUtil.entityClassName}>(mongoTemplate,${myUtil.entityClassName}.class);
         <%
             for(attr in myUtil.list){
                if(!attr.isNull){
                    if(attr.type == "String"){
                          println("        if(StringUtils.isEmpty(" + myUtil.entityName + ".get" + strutil.toUpperCase(strutil.subStringTo(attr.name,0,1)) + strutil.subString(attr.name,1) + "())) return null;");
                    }else{
                          println("        if(" + myUtil.entityName + ".get" + strutil.toUpperCase(strutil.subStringTo(attr.name,0,1)) + strutil.subString(attr.name,1) + "() == null ) return null;");
                    }
                }
             }
         %>
        baseDao.insert(${myUtil.entityName});
        return ${myUtil.entityName};
    }

    public ${myUtil.entityClassName} update(${myUtil.entityClassName} ${myUtil.entityName}){
        if(${myUtil.entityName} == null || ${myUtil.entityName}.getId() == null || getById(${myUtil.entityName}.getId()) == null){
            return null;
        }
        <%
             for(attr in myUtil.list){
                  if(!attr.isNull){
                      if(attr.type == "String"){
                          println("        if(StringUtils.isEmpty(" + myUtil.entityName + ".get" + strutil.toUpperCase(strutil.subStringTo(attr.name,0,1)) + strutil.subString(attr.name,1) + "())) return null;");
                      }
                      else{
                          println("        if(" + myUtil.entityName + ".get" + strutil.toUpperCase(strutil.subStringTo(attr.name,0,1)) + strutil.subString(attr.name,1) + "() == null ) return null;");
                      }
                   }
             }
        %>
        BaseDao<${myUtil.entityClassName}> baseDao = new BaseDao<${myUtil.entityClassName}>(mongoTemplate,${myUtil.entityClassName}.class);
        baseDao.update(${myUtil.entityName});
        return ${myUtil.entityName};
    }
    public List<${myUtil.entityClassName}> getList() {
        BaseDao<${myUtil.entityClassName}> baseDao = new BaseDao<${myUtil.entityClassName}>(mongoTemplate,${myUtil.entityClassName}.class);
        List<${myUtil.entityClassName}> ${myUtil.entityName} = baseDao.findAll();
        return ${myUtil.entityName};
    }

    public ${myUtil.entityClassName} getById(String id) {
        BaseDao<${myUtil.entityClassName}> baseDao = new BaseDao<${myUtil.entityClassName}>(mongoTemplate,${myUtil.entityClassName}.class);
        ${myUtil.entityClassName} ${myUtil.entityName} = baseDao.findById(id);
        return ${myUtil.entityName};
    }
    public void deleteById(String id) {
        BaseDao<${myUtil.entityClassName}> baseDao = new BaseDao<${myUtil.entityClassName}>(mongoTemplate,${myUtil.entityClassName}.class);
        baseDao.deleteById(id);
    }
  <%
       for(attr in myUtil.list){
         if(attr.isIndex){
         println("     public List<" + myUtil.entityClassName + "> getBy" + strutil.toUpperCase(strutil.subStringTo(attr.name,0,1)) + strutil.subString(attr.name,1) + "(" + attr.type + " " + attr.name + "){"  );
         println("         BaseDao<" + myUtil.entityClassName + "> baseDao = new BaseDao<" + myUtil.entityClassName + ">(mongoTemplate," + myUtil.entityClassName + ".class);");
         println('         Query query = Query.query(Criteria.where("' + attr.name + '").is(' + attr.name + '));' );
         println('         List<' + myUtil.entityClassName + '> list = baseDao.findByQuery(query);');
         println('         return list;');
         println('    }');
         println("     public void deleteBy" + strutil.toUpperCase(strutil.subStringTo(attr.name,0,1)) + strutil.subString(attr.name,1) + "(" + attr.type + " " + attr.name + "){"  );
         println("         BaseDao<" + myUtil.entityClassName + "> baseDao = new BaseDao<" + myUtil.entityClassName + ">(mongoTemplate," + myUtil.entityClassName + ".class);");
         println('         Query query = Query.query(Criteria.where("' + attr.name + '").is(' + attr.name + '));' );
         println('         baseDao.deleteByQuery(query);');
         println('    }');
        }
      }
  %>
  }
